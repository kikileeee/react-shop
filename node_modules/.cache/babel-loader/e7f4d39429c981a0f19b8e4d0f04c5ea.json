{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\paulo\\\\Desktop\\\\react shop\\\\react-shop\\\\my-app\\\\src\\\\Components\\\\Loginpage\\\\Signup.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport './login.scss';\nimport { BrowserRouter as Router, useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = () => {\n  _s();\n\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setconfirmPassword] = useState('');\n  const [email, setEmail] = useState('');\n  const history = useHistory();\n  const [refUsername, setrefUsername] = useState('d-none');\n  const [refUsernameSame, setrefUsernameSame] = useState('d-none');\n  const [refEmail, setRefEmail] = useState('d-none');\n  const [refPassword, setRefPassword] = useState('d-none');\n  const [refPasswordSame, setRefPasswordSame] = useState('d-none');\n  let data = {\n    username: username,\n    email: email,\n    password: password,\n    confirmPassword: confirmPassword\n  };\n\n  function sendData() {\n    fetch('http://localhost:9000/users', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      response.json().then(data => {\n        console.table(data);\n        ispisi(data);\n\n        if (data.success) {\n          history.push('/login');\n        }\n      });\n    });\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n  };\n\n  function ispisi(data) {\n    console.log('ispis');\n\n    if (data.usernameFailed) {\n      setrefUsername('');\n    } else {\n      setrefUsername('d-none');\n    }\n\n    if (data.usernameLengthFailed) {\n      setrefUsernameSame('');\n    } else {\n      setrefUsernameSame('d-none');\n    }\n\n    if (data.emailFailed) {\n      setRefEmail('');\n    } else {\n      setRefEmail('d-none');\n    }\n\n    if (data.passwordLengthFailed) {\n      setRefPassword('');\n    } else {\n      setRefPassword('d-none');\n    }\n\n    if (data.confirmPasswordFailed) {\n      setRefPasswordSame('');\n    } else {\n      setRefPasswordSame('d-none');\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"login\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sign up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Username\",\n      onChange: e => setUsername(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: refUsername,\n      children: \"Username must have more than 6 Characters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: refUsernameSame,\n      children: \"Account with that username already exists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      placeholder: \"Email address\",\n      onChange: e => setEmail(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: refEmail,\n      children: \"Email address must be valid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Password\",\n      onChange: e => setPassword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: refPassword,\n      children: \"Password must have atleast 6 Characters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Confirm Password\",\n      onChange: e => setconfirmPassword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: refPasswordSame,\n      children: \"Passwords must be the same\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendData,\n      children: \"Sign up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"/login\",\n      children: \"Already have an account? Sign in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"/\",\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"9RwQit754T08WY8OAdp9o0jvHoE=\", false, function () {\n  return [useHistory];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/paulo/Desktop/react shop/react-shop/my-app/src/Components/Loginpage/Signup.jsx"],"names":["React","useState","useRef","BrowserRouter","Router","useHistory","Login","username","setUsername","password","setPassword","confirmPassword","setconfirmPassword","email","setEmail","history","refUsername","setrefUsername","refUsernameSame","setrefUsernameSame","refEmail","setRefEmail","refPassword","setRefPassword","refPasswordSame","setRefPasswordSame","data","sendData","fetch","method","body","JSON","stringify","headers","then","response","json","console","table","ispisi","success","push","handleSubmit","e","preventDefault","log","usernameFailed","usernameLengthFailed","emailFailed","passwordLengthFailed","confirmPasswordFailed","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react'\r\nimport './login.scss'\r\nimport { BrowserRouter as Router, useHistory } from 'react-router-dom'\r\n\r\nconst Login = () => {\r\n  const [username, setUsername] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [confirmPassword, setconfirmPassword] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const history = useHistory()\r\n\r\n  const [refUsername, setrefUsername] = useState('d-none')\r\n  const [refUsernameSame, setrefUsernameSame] = useState('d-none')\r\n  const [refEmail, setRefEmail] = useState('d-none')\r\n  const [refPassword, setRefPassword] = useState('d-none')\r\n  const [refPasswordSame, setRefPasswordSame] = useState('d-none')\r\n\r\n\r\n\r\n  let data = {\r\n    username: username,\r\n    email: email,\r\n    password: password,\r\n    confirmPassword: confirmPassword\r\n  }\r\n\r\n  function sendData() {\r\n    fetch('http://localhost:9000/users', {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n      headers: { 'Content-Type': 'application/json' }\r\n    }).then(response => {\r\n      response.json().then(data => {\r\n\r\n        console.table(data)\r\n        ispisi(data)\r\n        if (data.success) {\r\n          history.push('/login')\r\n        }\r\n      })\r\n    })\r\n\r\n  }\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n  }\r\n  function ispisi(data) {\r\n    console.log('ispis')\r\n    if (data.usernameFailed) {\r\n      setrefUsername('')\r\n    }\r\n    else {\r\n      setrefUsername('d-none')\r\n    }\r\n    if (data.usernameLengthFailed) {\r\n      setrefUsernameSame('')\r\n    }\r\n    else {\r\n      setrefUsernameSame('d-none')\r\n    }\r\n    if (data.emailFailed) {\r\n      setRefEmail('')\r\n    }\r\n    else {\r\n      setRefEmail('d-none')\r\n    }\r\n    if (data.passwordLengthFailed) {\r\n      setRefPassword('')\r\n    }\r\n    else {\r\n      setRefPassword('d-none')\r\n    }\r\n    if (data.confirmPasswordFailed) {\r\n      setRefPasswordSame('')\r\n    }\r\n    else {\r\n      setRefPasswordSame('d-none')\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <form className='login' onSubmit={handleSubmit}>\r\n      <h2>Sign up</h2>\r\n      <input type=\"text\" placeholder=\"Username\" onChange={e => setUsername(e.target.value)} />\r\n      <p className={refUsername}>Username must have more than 6 Characters</p>\r\n      <p className={refUsernameSame}>Account with that username already exists</p>\r\n      <input type=\"email\" placeholder=\"Email address\" onChange={e => setEmail(e.target.value)}></input>\r\n      <p className={refEmail}>Email address must be valid</p>\r\n      <input type=\"password\" placeholder=\"Password\" onChange={e => setPassword(e.target.value)}></input>\r\n      <p className={refPassword}>Password must have atleast 6 Characters</p>\r\n      <input type=\"password\" placeholder=\"Confirm Password\" onChange={e => setconfirmPassword(e.target.value)}></input>\r\n      <p className={refPasswordSame}>Passwords must be the same</p>\r\n      <button onClick={sendData}>Sign up</button>\r\n      <a href=\"/login\">Already have an account? Sign in</a>\r\n      <a href=\"/\">Back</a>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Login"]},"metadata":{},"sourceType":"module"}